package handler

import (
	"context"
	"fmt"
	"log"
	"strings"

	"github.com/Na322Pr/unimates/internal/dto"
	"github.com/Na322Pr/unimates/internal/keyboard/reply"
	"github.com/Na322Pr/unimates/internal/usecase"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type CommandHandler struct {
	bot *tgbotapi.BotAPI
	uc  *usecase.Usecase
}

func NewCommandHandler(bot *tgbotapi.BotAPI, uc *usecase.Usecase) *CommandHandler {
	return &CommandHandler{
		bot: bot,
		uc:  uc,
	}
}

func (h *CommandHandler) Handle(ctx context.Context, update tgbotapi.Update) {
	// op := "CommandHandler.Handle"

	switch update.Message.Command() {
	case "start":
		h.Start(ctx, update)
	case "rules":
		h.Rules(ctx, update)
	case "howitworks":
		h.HowItWorks(ctx, update)
	case "profile":
		h.EditInterests(ctx, update)
	case "myprofile":
		h.MyInterests(ctx, update)
	case "myoffers":
		h.MyOffers(ctx, update)
	}
}

func (h *CommandHandler) Start(ctx context.Context, update tgbotapi.Update) {
	op := "CommandHandler.Start"

	err := h.uc.User.CreateUser(
		ctx,
		update.Message.From.ID,
		update.Message.From.UserName,
	)
	if err != nil {
		log.Printf("%s: %v", op, err)
	}

	msgText := `
–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –≤ Um-–±–æ—Ç–µ!üéâ

üåü–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤, –≥–¥–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–¥–µ–ª—è–µ—Ç—Å—è –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º –∏ —É–≤–ª–µ—á–µ–Ω–∏—è–º. –ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑–¥–µ–ª—è—é—Ç –≤–∞—à–∏ —Ö–æ–±–±–∏ –∏ —Å—Ç—Ä–∞—Å—Ç–∏, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ –±–æ–ª–µ–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º!

ü§≤ –ú—ã —Ö–æ—Ç–∏–º —Å–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ—Å—Ç–≤–æ –¥–ª—è –≤—Å–µ—Ö: –æ—Ç —Ö–æ–±–±–∏—Ö–æ—Ä—Å–µ—Ä–æ–≤ –¥–æ —Ñ–∏–ª–æ—Å–æ—Ñ–æ–≤, –æ—Ç –¥–∏–¥–∂–µ–µ–≤ –¥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä–æ–≤!¬†

üí° –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å UM - —ç—Ç–æ —à–∏—Ä–æ–∫–∏–π –≤—ã–±–æ—Ä —É–≤–ª–µ—á–µ–Ω–∏–π. –ù–µ –Ω–∞—à—ë–ª —Å–≤–æ–µ?`

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)
	msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("%s: %v", op, err)
	}

	msgText = `
üë´–ö–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —Å –ø–æ–º–æ—â—å—é Um-–±–æ—Ç–∞?

- –ù–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—ã—Ö —Å –ø–æ—Ö–æ–∂–∏–º–∏ —É–≤–ª–µ—á–µ–Ω–∏—è–º–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏.

- –õ—é–¥–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π.

- –ù–æ–≤—ã—Ö –¥—Ä—É–∑–µ–π –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ –æ–±–º–µ–Ω–∞ –æ–ø—ã—Ç–æ–º.

- –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ –∏–ª–∏ —É—á–µ–±–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.`

	msg = tgbotapi.NewMessage(update.Message.Chat.ID, msgText)

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("%s: %v", op, err)
	}

	msgText = `‚ù§Ô∏è–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–π—Ç–∏ –¥—Ä—É–∑–µ–π –∏ –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –≤ –º–∏—Ä–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤! –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ Um-–±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ —Å–≤—è–∑–∏. –£–¥–∞—á–∏ –∏ –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!üí¨‚ú®`

	msg = tgbotapi.NewMessage(update.Message.Chat.ID, msgText)

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("%s: %v", op, err)
	}
}

func (h *CommandHandler) Rules(ctx context.Context, update tgbotapi.Update) {
	op := "CommandHandler.Rules"

	msgText := `
üë•–ß—Ç–æ–±—ã –≤ –±–æ—Ç–µ –±—ã–ª–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –≤—Å–µ–º, –ø—Ä–æ—Å–∏–º —Ç–µ–±—è —Å–æ–±–ª—é–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –ø—Ä–∞–≤–∏–ª:

‚Ä¢ –ë—É–¥—å –≤–µ–∂–ª–∏–≤ –∏ —É–≤–∞–∂–∞–π –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.
‚Ä¢ –ù–µ –¥–µ–ª–∏—Å—å –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä—É—é –Ω–µ —Ö–æ—á–µ—à—å –¥–µ–ª–∞—Ç—å –ø—É–±–ª–∏—á–Ω–æ–π.
‚Ä¢ –ò–∑–±–µ–≥–∞–π —Å–ø–∞–º–∞, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–π –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–π –∏–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–π.
‚Ä¢ –ú—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø–µ—Ä–≤—É—é –≤—Å—Ç—Ä–µ—á—É –≤ —Å—Ç–µ–Ω–∞—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ —Ä–∞–¥–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.`

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("%s: %v", op, err)
	}
}

func (h *CommandHandler) HowItWorks(ctx context.Context, update tgbotapi.Update) {
	op := "CommandHandler.HowItWorks"

	msgText := `
üßë‚Äçüíª–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç UM?
	
1. –ó–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É, –≤—ã–±—Ä–∞–≤ —Å–≤–æ–∏ —É–≤–ª–µ—á–µ–Ω–∏—è: –£–∫–∞–∂–∏ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: –ü–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∏ —É–≤–∏–¥–µ—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–æ–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—ã.
3. –ü–æ–ª—É—á–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ú—ã –±—É–¥–µ–º –ø–æ–¥–±–∏—Ä–∞—Ç—å —Ç–µ–±–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏. –ß–µ–º –±–æ–ª—å—à–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º, —Ç–µ–º –≤—ã—à–µ —à–∞–Ω—Å –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å —Å–≤–æ–µ–≥–æ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!¬†
4. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω, —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Ç–æ–∂–µ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ, –ª–∏–±–æ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç —á–µ–ª–æ–≤–µ–∫–∞.
–¢–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –≤–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: @unimateschannel`

	msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("%s: %v", op, err)
	}
}

func (h *CommandHandler) EditInterests(ctx context.Context, update tgbotapi.Update) {
	op := "CommandHandler.EditInterests"

	userID := update.Message.From.ID

	if err := h.uc.User.SetStatus(ctx, userID, dto.UserStatusInterest); err != nil {
		log.Printf("%s: %v", op, err)
	}

	interests, err := h.uc.Interest.GetUserInterests(ctx, userID)
	if err != nil {
		log.Printf("%s: %v", op, err)
	}

	var msgText string
	if len(interests) == 0 {
		msgText = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"
	} else {
		msgText = fmt.Sprintf("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:\n%s", strings.Join(interests, "\n"))
	}

	msg := tgbotapi.NewMessage(userID, msgText)
	msg.ReplyMarkup = reply.EditInterestKeyboard

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("%s: %v", op, err)
	}
}

func (h *CommandHandler) MyOffers(ctx context.Context, update tgbotapi.Update) {
	op := "OfferHandler.MyOffers"
	userID := update.Message.From.ID

	if err := h.uc.User.SetStatus(ctx, userID, dto.UserStatusOffer); err != nil {
		log.Printf("%s: %v", op, err)
	}

	offers, err := h.uc.Offer.GetUserOffers(ctx, userID)
	if err != nil {
		log.Printf("%s: %v", op, err)
	}

	var keyboardRows [][]tgbotapi.KeyboardButton

	row := tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton("–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"))
	keyboardRows = append(keyboardRows, row)

	for _, offer := range offers {
		row = tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton(offer.Text.String))
		keyboardRows = append(keyboardRows, row)
	}

	row = tgbotapi.NewKeyboardButtonRow(tgbotapi.NewKeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"))
	keyboardRows = append(keyboardRows, row)

	keyboard := tgbotapi.NewReplyKeyboard(keyboardRows...)

	msgText := "–ú–µ–Ω—é –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π\n"

	msg := tgbotapi.NewMessage(userID, msgText)
	msg.ReplyMarkup = keyboard

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("%s: %v", op, err)
	}
}

func (h *CommandHandler) MyInterests(ctx context.Context, update tgbotapi.Update) {
	op := "CommandHandler.MyInterests"

	interests, err := h.uc.Interest.GetUserInterests(ctx, update.Message.From.ID)
	if err != nil {
		log.Printf("%s: %v", op, err)
	}

	var msgText string
	if len(interests) == 0 {
		msgText = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"
	} else {
		msgText = fmt.Sprintf("–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤:\n%s", strings.Join(interests, "\n"))
	}
	msg := tgbotapi.NewMessage(update.Message.Chat.ID, msgText)

	if _, err := h.bot.Send(msg); err != nil {
		log.Printf("%s: %v", op, err)
	}
}
